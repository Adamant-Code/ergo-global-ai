services:
  postgres:
    image: ankane/pgvector:v0.5.1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/server/src/config/vector/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 6s
      retries: 5
    networks:
      - app-network

  server:
    build:
      context: .
      dockerfile: apps/server/Dockerfile.dev
    ports:
      - "4000:4000"
    env_file:
      - ./apps/server/.env
    environment:
      - DEBUG=server/*
      - NODE_ENV=development
      - POSTGRES_HOST=postgres
      - JWT_SECRET=${JWT_SECRET}
      - USER_EMAIL=${USER_EMAIL}
      - POSTGRES_DB=${POSTGRES_DB}
      - BACKEND_URL=${BACKEND_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - USER_PASSWORD=${USER_PASSWORD}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PUBLIC_TEST_KEY=${STRIPE_PUBLIC_TEST_KEY}
      - STRIPE_SECRET_TEST_KEY=${STRIPE_SECRET_TEST_KEY}
      - STRIPE_BASIC_PLAN_PRICE_ID=${STRIPE_BASIC_PLAN_PRICE_ID}
      - STRIPE_PREMIUM_PLAN_PRICE_ID=${STRIPE_PREMIUM_PLAN_PRICE_ID}
      - SUPER_ADMIN_EMAIL=${SUPER_ADMIN_EMAIL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SUPER_ADMIN_PASSWORD=${SUPER_ADMIN_PASSWORD}
      - REFRESH_TOKEN_EXPIRY=${REFRESH_TOKEN_EXPIRY}
      - ADMINJS_COOKIE_PASSWORD=${ADMINJS_COOKIE_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public
    volumes:
      - ./packages:/app/packages
      - ./apps/server:/app/apps/server
      - /app/apps/server/node_modules
      - ./apps/server/public:/app/apps/server/public
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-service:
        condition: service_started
    networks:
      - app-network
    restart: no

    # Set the entrypoint as an array format
    entrypoint: ["sh", "/app/apps/server/docker-entrypoint.sh"]

    # Define the command to be executed by the entrypoint script
    command: ["npm", "run", "dev"]

  client:
    build:
      context: .
      dockerfile: apps/client/Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./apps/client:/app/apps/client
    networks:
      - app-network
    restart: unless-stopped
    command: npm run dev

  ai-service:
    build:
      context: .
      dockerfile: apps/ai-service/Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - ENV=development
      - ENVIRONMENT=LOCAL
      - API_KEY=${API_KEY}
      - LLM_API_KEY=${LLM_API_KEY}
      - DEFAULT_MAX_TOKENS=${DEFAULT_MAX_TOKENS}
    volumes:
      - ./apps/ai-service:/app
      - /app/__pycache__
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge